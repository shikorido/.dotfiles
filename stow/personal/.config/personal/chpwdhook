#!/usr/bin/env zsh

if [ -z "$__WEZTERM_CHPWD_INIT" ]; then

    # This function emits an OSC 1337 sequence to set a user var
    # associated with the current terminal pane.
    # It requires the `base64` utility to be available in the path.
    # This function is included in the wezterm shell integration script, but
    # is reproduced here for clarity
    __wezterm_set_user_var() {
        if hash base64 2>/dev/null; then
            if [ -z "$TMUX" ]; then
                # Make sure to disable base64 wrap.
                printf "\033]1337;SetUserVar=%s=%s\007" "$1" "`printf %s "$2" | base64 -w0`"
            else
                # <https://github.com/tmux/tmux/wiki/FAQ#what-is-the-passthrough-escape-sequence-and-how-do-i-use-it>
                # Note that you ALSO need to add "set -g allow-passthrough on" to your tmux.conf
                printf "\033Ptmux;\033\033]1337;SetUserVar=%s=%s\007\033\\" "$1" "`printf %s "$2" | base64 -w0`"
            fi
        fi
    }

    wezterm_chpwd_handler() {
        if [ -n "$WEZTERM_PANE" ]; then
            __wezterm_set_user_var ZSH_ORIG_CWD "$PWD"
        fi
    }

    # Save the current cwd before Oh My Zsh changes it
    __wezterm_set_user_var ZSH_ORIG_CWD "$PWD"

    # If chpwd is not defined as a function chpwd_functions won't work. So make sure it is defined and stub it if necessary
    [ -z "$(typeset -f chpwd)" ] && chpwd() {}

    export __WEZTERM_CHPWD_INIT=y
fi

if [ -z "$__WEZTERM_CHPWD_HOOK" ]; then
    # Zsh hook that gets called on every pwd change
    # Make sure to hook after oh-my-zsh initialization to avoid false cwd's for new panes
    #if [ -d "$ZSH" ] && ! (( ${chpwd_functions[(Ie)wezterm_chpwd_handler]} )); then
    if command -v omz >/dev/null && ! (( ${chpwd_functions[(Ie)wezterm_chpwd_handler]} )); then
        add-zsh-hook chpwd wezterm_chpwd_handler
        export __WEZTERM_CHPWD_HOOK=y
    fi
fi

